# Default values for hail-search.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: gcr.io/seqr-project/seqr-hail-search
  pullPolicy: Always
  # -- The docker image tag to pull from the repository
  # tag: "gcloud-dev"

imagePullSecrets: []

serviceAccount:
  create: true
  annotations: {}

podAnnotations: {}
deploymentAnnotations: {}

service:
  type: ClusterIP
  port: 5000

resources:
  {}

# default environment variables
environment:
  DATASETS_DIR: '/datasets'
  SSD_DATASETS_DIR: '/ssd-datasets'

initContainers: |-
   {{- range $path, $version := $.Values.global.hail_search.datasetVersions -}}
   {{- $localPath := $path | replace "SV" "SV_WGS" | replace "GCNV" "SV_WES" -}}
   - name: sync-annotations-{{ $path | replace "/" "-" | replace "_" "-" | lower}}
     image: busybox
     command: ['/bin/sh', '-c', 'mkdir -p {{ $.Values.environment.DATASETS_DIR }}/{{ $localPath }} && [ -d {{ $.Values.environment.SSD_DATASETS_DIR }}/{{ $localPath }}/annotations.ht ] && cp -r {{ $.Values.environment.SSD_DATASETS_DIR }}/{{ $localPath }}/annotations.ht {{ $.Values.environment.DATASETS_DIR }}/{{ $localPath }}/annotations.ht']
     volumeMounts:
       - mountPath: {{ $.Values.environment.DATASETS_DIR }}
         name: datasets
       - mountPath: {{ $.Values.environment.SSD_DATASETS_DIR }}
         name: ssd-datasets
         readOnly: true
   {{ end }}

# Prefer to be scheduled away from other seqr platform pods
affinity: |-
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1.0
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: "app.kubernetes.io/part-of"
                operator: In
                values:
                - "seqr-platform"
          topologyKey: "kubernetes.io/hostname"

nodeSelector: {}
tolerations: []

global:
  hail_search:
    datasetVersions: {}
    persistentVolume:
      storageCapacity: '100Gi'
      accessMode: ReadWriteOnce
      # Default to a single node kind cluster, but of course overrideable!
      localNodeSelector: kind-control-plane
      csi: {}

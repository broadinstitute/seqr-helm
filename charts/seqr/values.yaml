replicaCount: 1

image:
  repository: gcr.io/seqr-project/seqr
  pullPolicy: Always
imagePullSecrets: []

serviceAccount:
  create: true
  annotations: {}

podAnnotations: {}
deploymentAnnotations: {}

service:
  type: NodePort
  port: 8000
  nodePort: 30950

ingress:
  enabled: false

resources:
  {}

affinity: |-
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1.0
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: "app.kubernetes.io/part-of"
                operator: In
                values:
                - "seqr-platform"
          topologyKey: "kubernetes.io/hostname"

nodeSelector: {}
tolerations: []

environment:
  # -- The number of threads to allocate to the gunicorn server
  GUNICORN_WORKER_THREADS: "4"
  # -- The hostname to use for the postgres database connectsion
  POSTGRES_SERVICE_HOSTNAME: "seqr-postgresql"
  # -- The username to use for the postgres database connection
  POSTGRES_USERNAME: "postgres"
  # -- The TCP port number to use for the postgres database connection
  POSTGRES_SERVICE_PORT: "5432"
  # -- The hostname of the redis cache that seqr should use
  REDIS_SERVICE_HOSTNAME: "seqr-redis-master"
  # -- The port of the redis cache that seqr should use
  REDIS_SERVICE_PORT: "6379"
  # -- The port that the seqr server should listen on
  SEQR_SERVICE_PORT: "8000"  # TODO: this should probably always match the service.port setting?
  # -- If storing static media files in a local filesystem, the path to that filesystem
  STATIC_MEDIA_DIR: '/var/seqr/seqr-static-media'

  HAIL_BACKEND_SERVICE_HOSTNAME: "hail-search"
  HAIL_BACKEND_SERVICE_PORT: "5000"
  PIPELINE_RUNNER_HOSTNAME: "pipeline-runner"
  PIPELINE_RUNNER_PORT: "5000"
  LOADING_DATASETS_DIR: '/var/seqr/seqr-loading-temp'
  HAIL_SEARCH_DATA_DIR: '/var/seqr/seqr-hail-search-data'

# -- Secrets which are required for seqr's functionality
requiredSecrets:
  # -- The secret containing the postgres credentials. See the README for information on the format of this secret
  postgresSecretName: &postgresSecretName postgres-secrets
  # -- The secret containing the seqr required secrets. See the README for information on the format of this secret
  seqrSecretName: seqr-secrets

additionalSecrets: {}
volumes: |-
  - name: seqr-datasets
    persistentVolumeClaim:
      readOnly: false
      claimName: {{ include "lib.pvc-name" . }}
volumeMounts: |-
  - name: seqr-datasets
    mountPath: /var/seqr
    readOnly: false
initContainers: |-
  - name: mkdir-loading-datasets
    image: busybox:1.35
    imagePullPolicy: {{ $.Values.image.pullPolicy }}
    command: ['/bin/mkdir', '-p', {{ $.Values.environment.LOADING_DATASETS_DIR }}]
    {{- with $.Values.volumeMounts }}
    volumeMounts:
      {{- tpl . $ | nindent 4 }}
    {{- end }}

jobAfterHook: ""
jobBeforeHook: ""
cronJobs:
  - name: check-new-samples-job
    schedule: "*/10 * * * *"
    command: "python manage.py check_for_new_samples_from_pipeline"

redis:
  # -- Set to "false" to disable the redis cache (if you're using a managed cache service).
  enabled: true
  architecture: standalone
  auth:
    enabled: false
  fullnameOverride: "seqr-redis"

postgresql:
  # -- Set to "false" to disable the postgresql deployent (if you're using a managed cloud database).
  enabled: true
  architecture: standalone
  auth:
    username: postgres
    existingSecret: *postgresSecretName
    secretKeys:
      # Keyword used to find the admin password inside the existingSecret
      adminPasswordKey: password
  fullnameOverride: seqr-postgresql
  image:
    tag: '12.19.0-debian-12-r9'
  postgresqlDataDir: /var/seqr/postgresql-data
  primary:
    persistence:
      existingClaim: |-
        {{ include "lib.pvc-name" . }}
      mountPath: /var/seqr
    # We ran into race condition issues with the liveness probe killing
    # the postgres init and leaving partial state in the data dir.
    # Some details here: https://github.com/bitnami/charts/issues/14683
    startupProbe:
      enabled: true

    # This is a reduced initContainers intended to replace the default
    # provided with volumePermissions.enabled set to True.  The default
    # uses the /data subdirectory and ignores postgresqlDataDir
    # leading to an incorrectly permissioned data directory.
    # See here: https://github.com/bitnami/charts/blob/aa038e9953df2ba74d481cb7ba1cccb3dc32c5fc/bitnami/postgresql/templates/primary/statefulset.yaml#L117-L157
    initContainers:
      - name: seqr-postgresql-init-chmod-data
        image: |-
          {{- include "postgresql.v1.volumePermissions.image" . }}
        imagePullPolicy: "IfNotPresent"
        command:
          - /bin/sh
          - -ec
          - |
            mkdir -p {{ .Values.postgresqlDataDir }}
            chown -R `id -u`:`id -G | cut -d " " -f2` {{ .Values.postgresqlDataDir }}
        # In theory this block is template-able but is getting wrapped in single quotes.
        securityContext:
          runAsGroup: 0
          runAsNonRoot: false
          seLinuxOptions: {}
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
          - name: data
            mountPath: /var/seqr

global:
  seqrPlatformDeploy: false

replicaCount: 1

image:
  repository: gcr.io/seqr-project/seqr
  pullPolicy: Always
imagePullSecrets: []

serviceAccount:
  create: true
  annotations: {}

podAnnotations: {}
deploymentAnnotations: {}

service:
  type: NodePort
  port: 8000
  nodePort: 30950

ingress:
  enabled: false

resources:
  {}

affinity: |-
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1.0
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: "app.kubernetes.io/part-of"
                operator: In
                values:
                - "seqr-platform"
          topologyKey: "kubernetes.io/hostname"

nodeSelector: {}
tolerations: []

environment:
  # -- The number of threads to allocate to the gunicorn server
  GUNICORN_WORKER_THREADS: "4"
  # -- The hostname to use for the postgres database connectsion
  POSTGRES_SERVICE_HOSTNAME: "seqr-postgresql"
  # -- The username to use for the postgres database connection
  POSTGRES_USERNAME: "postgres"
  # -- The TCP port number to use for the postgres database connection
  POSTGRES_SERVICE_PORT: "5432"
  # -- The hostname of the redis cache that seqr should use
  REDIS_SERVICE_HOSTNAME: "seqr-redis-master"
  # -- The port of the redis cache that seqr should use
  REDIS_SERVICE_PORT: "6379"
  # -- The port that the seqr server should listen on
  SEQR_SERVICE_PORT: "8000"  # TODO: this should probably always match the service.port setting?
  # -- If storing static media files in a local filesystem, the path to that filesystem
  STATIC_MEDIA_DIR: "/var/seqr/seqr-static-media"

  HAIL_BACKEND_SERVICE_HOSTNAME: "hail-search"
  HAIL_BACKEND_SERVICE_PORT: "5000"
  PIPELINE_RUNNER_HOSTNAME: "pipeline-runner-api"
  PIPELINE_RUNNER_PORT: "6000"
  LUIGI_UI_SERVICE_HOSTNAME: "pipeline-runner-ui"
  LUIGI_UI_SERVICE_PORT: "8082"

  # Clickhouse Config
  CLICKHOUSE_READER_USER: "seqr_clickhouse_reader"
  CLICKHOUSE_WRITER_USER: "seqr_clickhouse_writer"
  CLICKHOUSE_VLM_USERNAME: "vlm_clickhouse_reader"

# -- Secrets which are required for seqr's functionality
requiredSecrets:
  # -- The secret containing the postgres credentials. See the README for information on the format of this secret
  postgresSecretName: &postgresSecretName postgres-secrets
  # -- The secret containing the seqr required secrets. See the README for information on the format of this secret
  seqrSecretName: seqr-secrets

  clickhouseSecretName: &clickhouseSecretName clickhouse-secrets

additionalSecrets: {}
volumes: |-
  - name: seqr-datasets
    persistentVolumeClaim:
      readOnly: false
      claimName: {{ include "lib.pvc-name" . }}
volumeMounts: |-
  - name: seqr-datasets
    mountPath: /var/seqr
    readOnly: false
initContainers: |-
  - name: mkdir-loading-datasets
    image: busybox:1.35
    imagePullPolicy: {{ $.Values.image.pullPolicy }}
    command: ['/bin/mkdir', '-p', {{ $.Values.global.seqr.environment.LOADING_DATASETS_DIR }}]
    {{- with $.Values.volumeMounts }}
    volumeMounts:
      {{- tpl . $ | nindent 4 }}
    {{- end }}

jobAfterHook: ""
jobBeforeHook: ""
cronJobs:
  - name: check-new-samples-job
    schedule: "*/10 * * * *"
    command: "python manage.py check_for_new_samples_from_pipeline"
  - name: update-all-reference-data
    schedule: "*/5 * * * *"
    command: "python manage.py update_all_reference_data"

updateAllReferenceDataPostInstallJob:
  enabled: true

networkPolicy:
  enabled: false

redis:
  # -- Set to "false" to disable the redis cache (if you're using a managed cache service).
  enabled: true
  images:
    repository: bitnamilegacy/redis
  architecture: standalone
  auth:
    enabled: false
  networkPolicy:
    enabled: false
  fullnameOverride: "seqr-redis"

postgresql:
  # -- Set to "false" to disable the postgresql deployent (if you're using a managed cloud database).
  enabled: true
  architecture: standalone
  auth:
    username: postgres
    existingSecret: *postgresSecretName
    secretKeys:
      # Keyword used to find the admin password inside the existingSecret
      adminPasswordKey: password
  fullnameOverride: seqr-postgresql
  image:
    repository: bitnamilegacy/postgresql
    tag: '12.19.0-debian-12-r9'
  postgresqlDataDir: /var/seqr/postgresql-data
  primary:
    initdb:
      scripts:
        00_init.sql: |
          CREATE DATABASE seqrdb;
          CREATE DATABASE reference_data_db;
    resources:
      limits:
        memory: "2Gi"
    persistence:
      existingClaim: |-
        {{ include "lib.pvc-name" . }}
      mountPath: /var/seqr
    # We ran into race condition issues with the liveness probe killing
    # the postgres init and leaving partial state in the data dir.
    # Some details here: https://github.com/bitnami/charts/issues/14683
    startupProbe:
      enabled: true

    # This is a reduced initContainers intended to replace the default
    # provided with volumePermissions.enabled set to True.  The default
    # uses the /data subdirectory and ignores postgresqlDataDir
    # leading to an incorrectly permissioned data directory.
    # See here: https://github.com/bitnami/charts/blob/aa038e9953df2ba74d481cb7ba1cccb3dc32c5fc/bitnami/postgresql/templates/primary/statefulset.yaml#L117-L157
    initContainers:
      - name: seqr-postgresql-init-chmod-data
        image: |-
          {{- include "postgresql.v1.volumePermissions.image" . }}
        imagePullPolicy: "IfNotPresent"
        command:
          - /bin/sh
          - -ec
          - |
            mkdir -p {{ .Values.postgresqlDataDir }}
            chown -R `id -u`:`id -G | cut -d " " -f2` {{ .Values.postgresqlDataDir }}
        # In theory this block is template-able but is getting wrapped in single quotes.
        securityContext:
          runAsGroup: 1001
          runAsNonRoot: false
          seLinuxOptions: {}
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
          - name: data
            mountPath: /var/seqr

# The clickhouse backend is experimental and not yet supported.
clickhouse:
  enabled: false
  image:
    repository: bitnamilegacy/clickhouse
    # Per https://github.com/bitnami/charts/tree/main/bitnami/clickhouse#rolling-vs-immutable-tags
    # recommended to hard pin.
    tag: '25.4.3'
  fullnameOverride: seqr-clickhouse
  shards: 1
  replicaCount: 1
  resourcesPreset: "none"
  networkPolicy:
    enabled: false
  keeper:
    enabled: false
  auth:
    username: seqr_clickhouse_admin
    existingSecret: *clickhouseSecretName
    existingSecretKey: admin_password
  persistence:
    enabled: true
    existingClaim: |-
      {{ include "lib.pvc-name" . }}
    mountPath: /var/seqr
  serviceAccount:
    create: true
    name: seqr-clickhouse
  usePasswordFiles: false
  extraVolumeMounts:
    - name: in-memory-dir
      mountPath: /in-memory-dir
    # Well documented bug in chart init:
    # https://github.com/bitnami/charts/issues/24473
    # https://github.com/bitnami/charts/issues/27607
    # Without this block, the clickhouse startup script does not have perms to write the /bitnami/clickhouse/data/.user_scripts_initialized file
    # that signals a successful db initialization.
    - name: empty-dir
      mountPath: /bitnami/clickhouse/data
      subPath: app-volume-dir-for-init
  extraVolumes:
    - name: in-memory-dir
      emptyDir:
        medium: "Memory"
  initContainers:
    - name: seqr-clickhouse-init-chmod-data
      image: busybox
      command:
        - /bin/sh
        - -ec
        - |
          mkdir -p {{ .Values.global.seqr.environment.CLICKHOUSE_DATA_DIR  }}
          chown -R 1001:1001 {{ .Values.global.seqr.environment.CLICKHOUSE_DATA_DIR }}
      securityContext:
        runAsGroup: 1001
        runAsNonRoot: false
        seLinuxOptions: {}
        seccompProfile:
          type: RuntimeDefault
      volumeMounts:
        - name: data
          mountPath: |-
            {{ .Values.persistence.mountPath }}
    - name: sync-annotations-disk
      image: busybox
      command: ['/bin/sh', '-c', 'mkdir -p $CLICKHOUSE_DATA_DIR && cd $CLICKHOUSE_DATA_DIR && find . -type f | grep -E "GRCh(37|38)/[^/]+/(v[0-9]+/)?annotations" | xargs -I{} -P16 cp -v --parents {} $CLICKHOUSE_IN_MEMORY_DIR && chown -R 1001:1001 $CLICKHOUSE_IN_MEMORY_DIR']
      env:
        - name: CLICKHOUSE_IN_MEMORY_DIR
          value: |-
            {{ .Values.global.seqr.environment.CLICKHOUSE_IN_MEMORY_DIR }}
        - name: CLICKHOUSE_DATA_DIR
          value: |-
            {{ .Values.global.seqr.environment.CLICKHOUSE_DATA_DIR }}
      volumeMounts:
        - name: in-memory-dir
          mountPath: |-
            {{ .Values.global.seqr.environment.CLICKHOUSE_IN_MEMORY_DIR }}
        - name: data
          mountPath: |-
            {{ .Values.persistence.mountPath }}
  extraEnvVars:
    - name: POSTGRES_PASSWORD
      valueFrom:
        secretKeyRef:
          name: *postgresSecretName
          key: password
    - name: CLICKHOUSE_READER_PASSWORD
      valueFrom:
        secretKeyRef:
          name: *clickhouseSecretName
          key: reader_password
    - name: CLICKHOUSE_WRITER_PASSWORD
      valueFrom:
        secretKeyRef:
          name: *clickhouseSecretName
          key: writer_password
    - name: CLICKHOUSE_VLM_PASSWORD
      valueFrom:
        secretKeyRef:
          name: vlm-secrets
          key: seqr_clickhouse_vlm_password
          optional: true
    - name: CLICKHOUSE_SEARCH_ACCESS_ID
      valueFrom:
        secretKeyRef:
          name: clickhouse-hmac-secrets
          key: clickhouse_search_access_id
          optional: true
    - name: CLICKHOUSE_SEARCH_SECRET
      valueFrom:
        secretKeyRef:
          name: clickhouse-hmac-secrets
          key: clickhouse_search_secret
          optional: true
  sidecars:
    - name: clickhouse-loader
      image: gcr.io/seqr-project/seqr-pipeline-runner
      imagePullPolicy: Always
      command: ["/bin/bash", "-c"]
      args: ["python3 -m v03_pipeline.bin.clickhouse_loader"]
      env:
        - name: CLICKHOUSE_DATA_DIR
          value: |-
            {{ .Values.global.seqr.environment.CLICKHOUSE_DATA_DIR }}
        - name: PIPELINE_DATA_DIR
          value: |-
            {{ .Values.global.seqr.environment.PIPELINE_DATA_DIR }}
        - name: CLICKHOUSE_WRITER_USER
          value: "seqr_clickhouse_writer"
        - name: CLICKHOUSE_WRITER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: *clickhouseSecretName
              key: writer_password
      volumeMounts:
        - name: data
          mountPath: |-
            {{ .Values.persistence.mountPath }}
  existingConfigdConfigmap: seqr-clickhouse-configd-config
  existingUsersdConfigmap: seqr-clickhouse-usersd-config
  initdbScriptsSecret: seqr-clickhouse-init-db-secret
  initdbSecretEnabled: true  # note this is not a clickhouse chart variable, but controls seqr's db initialization.
global:
  seqr:
    environment:
      CLICKHOUSE_IN_MEMORY_DIR: "/in-memory-dir"
      CLICKHOUSE_DATA_DIR: "/var/seqr/clickhouse-data"
      PIPELINE_DATA_DIR: "/var/seqr/pipeline-data"
      LOADING_DATASETS_DIR: "/var/seqr/seqr-loading-temp"
  seqrPlatformDeploy: false
  # Enables support for bitnami legacy images (with additional context https://github.com/bitnami/charts/issues/30850#issuecomment-3031915203)
  security:
    allowInsecureImages: true
